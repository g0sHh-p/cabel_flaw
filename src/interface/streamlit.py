#!/usr/bin/env python3
"""
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞—Ç–∞
–Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
"""

import streamlit as st
import sys
import os
import cv2
import numpy as np
from PIL import Image
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core import (
    create_defect_detection_model,
    load_defect_detection_model,
    DefectDetectionModel,
    preprocess_images
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∫–∞–Ω–∞—Ç–æ–≤",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üîç –î–µ—Ç–µ–∫—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∫–∞–Ω–∞—Ç–æ–≤")
st.markdown("**–ê–Ω–∞–ª–∏–∑ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó**")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'model_loaded' not in st.session_state:
    st.session_state.model_loaded = False
if 'model' not in st.session_state:
    st.session_state.model = None

def load_or_create_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    model_path = "defect_detection_model.pkl"
    
    if os.path.exists(model_path):
        try:
            model = load_defect_detection_model(model_path)
            st.session_state.model = model
            st.session_state.model_loaded = True
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return False
    else:
        st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        
        processed_folder = "data/etln_proc"
        if os.path.exists(processed_folder):
            try:
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤..."):
                    model = create_defect_detection_model(processed_folder, model_path)
                    st.session_state.model = model
                    st.session_state.model_loaded = True
                    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    return True
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
                return False
        else:
            st.error(f"–ü–∞–ø–∫–∞ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {processed_folder}")
            return False

def analyze_image(image_file):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    if not st.session_state.model_loaded:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return None
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_path = f"temp_{int(time.time())}.jpg"
        with open(temp_path, "wb") as f:
            f.write(image_file.getbuffer())
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
            results = st.session_state.model.detect_defects(temp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        
        return results
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def display_results(results):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥: –¥–µ—Ñ–µ–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω / –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"""
    if not results:
        return
    if results.get('has_defect'):
        st.error("üö® **–î–ï–§–ï–ö–¢ –û–ë–ù–ê–†–£–ñ–ï–ù**")
        confidence = results.get('defect_confidence', 0.0) * 100.0
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")
    else:
        st.success("‚úÖ **–î–ï–§–ï–ö–¢–û–í –ù–ï–¢**")
        confidence = results.get('defect_confidence', 0.0) * 100.0
        st.write(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if not st.session_state.model_loaded:
        if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
            load_or_create_model()
    
    if st.session_state.model_loaded:
        st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        with st.sidebar.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
            summary = st.session_state.model.get_model_summary()
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {summary['model_name']}")
            st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {summary['created_at']}")
            st.write(f"**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {summary['image_count']}")
            st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —è—Ä–∫–æ—Å—Ç–∏:** {summary['statistics_summary']['brightness']['parameter_count']}")
            st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç—É—Ä–æ–≤:** {summary['statistics_summary']['contour']['parameter_count']}")
            st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–∫—Å—Ç—É—Ä—ã:** {summary['statistics_summary']['texture']['parameter_count']}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.header("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            type=['jpg', 'jpeg', 'png', 'bmp'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, BMP"
        )
        
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                image = Image.open(uploaded_file)
                st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                st.write(f"**–†–∞–∑–º–µ—Ä:** {image.size[0]} x {image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
                st.write(f"**–§–æ—Ä–º–∞—Ç:** {image.format}")
                st.write(f"**–†–µ–∂–∏–º:** {image.mode}")
            
            with col2:
                st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                if st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type="primary"):
                    results = analyze_image(uploaded_file)
                    if results:
                        display_results(results)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.sidebar.expander("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.write("**–ü–æ—Ä–æ–≥–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏:**")
            thresholds = st.session_state.model.defect_thresholds
            for key, value in thresholds.items():
                st.write(f"‚Ä¢ {key}: {value}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–µ—Ñ–µ–∫—Ç–∞—Ö
        with st.sidebar.expander("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã"):
            defects = [
                "1. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –¥–∏–∞–º–µ—Ç—Ä—É –∫–∞–Ω–∞—Ç–∞",
                "2. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≤–æ–ª–æ–∫ –≤ –ø—Ä—è–¥–∏",
                "3. –ü–µ—Ä–µ–∫—Ä–µ—â–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–ª–æ–∫",
                "4. –ü–µ—Ä–µ–∫—Ä—É—Ç –ø—Ä—è–¥–∏ (–¥–µ—Ñ–µ–∫—Ç ¬´–∂—É—á–æ–∫¬ª)",
                "5. –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É –ø—Ä—è–¥—è–º–∏",
                "6. –í—ã–¥–∞–≤–ª–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–∏–∫–∞ –∏–ª–∏ –ø—Ä–æ–≤–æ–ª–æ–∫–∏",
                "7. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä–¥–µ—á–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞—Ç–µ",
                "8. –î–µ—Ñ–µ–∫—Ç ¬´–±—É—Ä—É–Ω–¥–∞¬ª",
                "9. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä—è–¥–∏",
                "10. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–≤–∏–≤–∫–∞"
            ]
            for defect in defects:
                st.write(defect)
    
    else:
        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å' –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        st.info("""
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
        
        1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –ø–∞–ø–∫–µ `data/etln_proc/` –µ—Å—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å" –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        4. –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        5. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        
        **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
        - –¢–æ—á–Ω–æ—Å—Ç—å: ‚â• 80%
        - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ‚â§ 10 —Å–µ–∫/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: JPG, JPEG, PNG, BMP
        """)

if __name__ == "__main__":
    main()
